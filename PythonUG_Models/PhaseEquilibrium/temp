


    for iter_phase in range( Niter_Phase ):

        """ Generating arrays of molar/mass fraction of all phases. """
        PhaFrac = NC.Generate_PhaseFraction( iter_phase, Inc_Phase )
        ThT.PhaseFrac = PhaFrac

        print 'ThT.PhaseFrac:', ThT.PhaseFrac

        for iter_comp in range( Niter_Comp ):

            """ Generating arrays of mole/mass fraction of each component at all phase. """
            MolFrac =  NC.Generate_MoleFraction( PhaFrac, iter_comp, Inc_Comp )
            ThT.MFrac = MolFrac
            print 'MolFrac:', MolFrac
            stop

            for iphase in range( ThT.NPhase ):
                sumcomp = 0.
                for icomp in range( ThT. NComp ):
                    node = iphase * ThT.NComp + icomp
                    if icomp == ThT.NComp - 1:
                        ThT.MFrac[ node ] = 1. - sumcomp
                            
                    else:
                        sumcomp = sumcomp + MolFrac[ node ]

            if ThT.Debug:
                print ' ===================================='
                print '    Composition of components in all phases: '
                print '      ThT.MFrac:', ThT.MFrac
                print ' '
                print ' '
                print '    Composition of both phases: '
                print '      ThT.PhaseFrac:', ThT.PhaseFrac
                print ' '
                print ' ===================================='
                print ' '
   
    
            '''
               ===============================================================
                  MICHAELSEN'S STABILITY TEST: Decision of the Phases 
               ===============================================================
                                                                              '''
            ( Comp, Comp_Phase, index_phase, GZero ) = Michaelsen.Phase_Stability( Temp, Press )
            Michaelsen.CheckingPhases( Comp_Phase, GZero )

            """ COMP_PHASE is an array that contains (NComp - 1) mole/mass fraction of
                           components + (1) molar/mass fraction of the INDEX_PHASE by
                           the CHECKINGPHASES function.                                 """

            if ThT.Debug:
                print 'GZero:', GZero, Comp_Phase


            InitialAssessment = False #True
            iter = iter_phase * Niter_Comp + iter_comp
            Molar_Gibbs_Free[ iter ] = GibbsF.GibbsObjectiveFunction( InitialAssessment, Temp, Press, Comp_Phase )
            Composition[ iter ] = Comp_Phase[ 0 ]
            Phase[ iter ] = Comp_Phase[ ThT.NComp - 1 ] 

            pickle.dump( Comp_Phase, OutFile )

            print 'Comp_Phase:', Comp_Phase[ 0 ], Comp_Phase[ ThT.NComp - 1 ] 
            print 'Molar Gibbs Free Energy:', Molar_Gibbs_Free[ iter ]

    for iter in range( Niter_Phase * Niter_Comp ):
        print Composition[ iter ], Molar_Gibbs_Free[ iter ], Phase[ iter ]



    Molar_Gibbs_Free_Sort = [ 0. for i in range( Niter_Phase * Niter_Comp ) ]
    Sortindex = [ 0 for i in range( Niter_Phase * Niter_Comp ) ]
    Molar_Gibbs_Free_Sort = np.sort( Molar_Gibbs_Free )
    Sortindex = np.argsort( Molar_Gibbs_Free )
    print '===>>>'
    for i in range( Niter_Comp * Niter_Phase ):
        print Sortindex[ i ], Composition[ Sortindex[i] ], Molar_Gibbs_Free[ Sortindex[i] ]




    """

        OutFile.close()

        f = open("output")
        data = pickle.load( f )
        print data"""


    """print ' ++++++++++++ '
    for iter in range( Niter_Comp * Niter_Phase ):
        print Composition[ iter ], Molar_Gibbs_Free[ iter ]

    
    Molar_Gibbs_Free_Sort = [ 0. for i in range( Niter_Phase * Niter_Comp ) ]
    Sortindex = [ 0 for i in range( Niter_Phase * Niter_Comp ) ]
    Molar_Gibbs_Free_Sort = np.sort( Molar_Gibbs_Free )
    Sortindex = np.argsort( Molar_Gibbs_Free )
    print '===>>>'
    for i in range( Niter_Comp * Niter_Phase ):
        print Sortindex[ i ]#, Composition[ i ][ 0 ], Molar_Gibbs_Free_Sort[ i ]"""



