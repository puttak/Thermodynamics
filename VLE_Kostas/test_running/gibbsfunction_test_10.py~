#!/usr/bin/env python

import numpy as np
import math
import sys
import thermotools_test as ThT
import calculate_EOS_PR_test as PR
import calculate_ln_gamma_test as lng
import calculate_fi_test as fi
import calculate_terms_test as terms
import calculate_chemical_potential_test as chemp
from mpl_toolkits.mplot3d import Axes3D
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
import matplotlib.pyplot as plt
import time 

###
### Functions Call_Calc_ChemPot
###
def Call_Calc_ChemPot( MFrac ):  # This function will ...

    for iphase in range(ThT.NPhase): # Loop for Phases
        node_init = iphase * ThT.NComp ; node_final = iphase * ThT.NComp + ThT.NComp
        ChemPot = [0. for z in range(ThT.NComp * ThT.NPhase) ] # Creating a temporary array ChemPot

        print MFrac[ node_init:node_final ], node_init, node_final
        ChemPot[ node_init:node_final ] = chemp.Calc_ChemPot( iphase, MFrac[ node_init : node_final ] )

    # End Loop for Phases

        ''' NOT SURE WHY O YOU NEED i AND j here ... BOTH CONDITIONALS DO THE SAME THING
                if i == j: # What am I doing here ...  What is the diff here in this conditional ???
                    print MFrac[ node_init:node_final ], node_init, node_final
                    ChemPot[ node_init:node_final ] = chemp.Calc_ChemPot( iphase, MFrac[ node_init : node_final ] )
                else:
                    print '  i am in the else case ' #' for the component ', ThT.Species[i],' with respect to' , ThT.Species[j]
                    ChemPot[ node_init:node_final ] = chemp.Calc_ChemPot( iphase, MFrac[ node_init : node_final ] )
                # end of the  i=j conditional representing ... '''

    return ChemPot

###
### Function Call_Calc_Gibbs:
###
def Call_Calc_Gibbs( MFrac, ChemPot ): # This function will ...
    
    """ Setting molar fraction of the phases in equilibrium """
    PhaseFrac = [0. for k in range( ThT.NPhase ) ] #; PhaseFrac[ 0 ] = 0.35 ;  PhaseFrac[ 1 ] = 1. - PhaseFrac[ 0 ]

    '''This needs to be generalised later on ... for now it is just a quick hack ... '''
    Temp = MFrac[ 0 ] - MFrac[ 2 ]
    if ( abs( Temp - 0. ) <= 1.e-10 ):
        sys.exit()
    else:
        #PhaseFrac[ 0 ] = ( ThT.Z_Feed[0] - MFrac[ 2 ] ) / Temp ; PhaseFrac[ 1 ] = 1. - PhaseFrac[ 0 ]
        PhaseFrac[ 0 ] = 0.1 ; PhaseFrac[ 1 ] = 1. - PhaseFrac[ 0 ]  
        # the line above describes the condition for the feed composition zi = V * yi + (1 - V) * xi
    
    sumGibbs = 0. ; sumfeedk = 0.
    for icomp in range( ThT.NComp ): # Loop ICOMP
        Vphase = 0 ; Lphase = 1 
        #Vphase = 0.9 ; Lphase = 0.1
        nodeV = Vphase * ThT.NComp + icomp ; nodeL = Lphase * ThT.NComp + icomp             # a clever way to describe the nodes for Vapour and liquid phases
        nodeVfinal = Vphase * ThT.NComp + ThT.NComp - 1; nodeLfinal = Lphase * ThT.NComp + ThT.NComp - 1
        
        if icomp <= ThT.NComp - 2: # Conditional ICOMP
            sumGibbs = sumGibbs + PhaseFrac[ Lphase ] * MFrac[ nodeL ]  * ( ( ChemPot[ nodeL ]  - ChemPot[ nodeV ] ) - ( ChemPot[ nodeLfinal ]  - ChemPot[ nodeVfinal ] ) )
            #sumGibbs = sumGibbs + PhaseFrac[ Lphase ] * MFrac[ nodeL ]  * ( ( ChemPot[ nodeL ]  - ChemPot[ nodeV ] ) - ( ChemPot[ nodeLfinal ]  - ChemPot[ nodeVfinal ] ) )

        # End of Conditional ICOMP
        
        sumfeedk = sumfeedk + ThT.Z_Feed[icomp] * ChemPot[ nodeV ]

    # End of Loop ICOMP
    Gibbs = sumGibbs + sumfeedk

    return Gibbs


####
print
print
print ' = = = = = = = = = = = = = = = = = = = = = = = = = BEGIN OF THE GIBBS CALCULATIONS = = = = = = = = = = = = = = = = = = = = = = = = '
print
print

                                                  
ThT.ReadSet_Global_Variables()                             # reading the external file 

MFrac = [ 0. for i in range( ThT.NComp * ThT.NPhase ) ]    # create an a array with 0 values for the MFrac    

c1 = np.linspace(0.1, 0.9999, 25)   # + - 25%
c2 = []
#c2 = np.linspace(0.5891, 0.9818, 5 ) 
for x in c1:
    c2.append(1.0-x)

c2 = np.array(c2)

print ' component 1 = ', c1
print
print ' component 2 = ', c2
print

nk = len(c1)

c1b = [ 0. for k in range( nk*nk ) ] #; print ' c1b = ', c1b
c2b = [ 0. for k in range( nk*nk ) ] #; print ' c1b = ', c1b
gmix = [ 0. for k in range( nk*nk ) ]


MFrac = [ 0.01 for i in range( ThT.NComp * ThT.NPhase ) ]
MFrac[0] = 0.2944 ; MFrac[1] = 1 - MFrac[0]
MFrac[2] = 0.1 ; MFrac[3] = 1 - MFrac[2]

''' Calculating ChemPot for both phases '''
ChemPot = Call_Calc_ChemPot( MFrac ) # ChemPot has dimension (NPhase * NComp) 

''' Now calculating the molar Gibbs energy for the tuple (MFrac[0], MFrac[2]) = (c1b[node],c2b[node])  '''  
MolarGibbs =  -Call_Calc_Gibbs( MFrac, ChemPot ) 

print 'MolarGibbs', MolarGibbs


if False : 
    #Creating arrays c1b and c2b with the ranges of composition (vapour and liquid) for late plotting 
    for i in range( nk ):
        for j in range( nk ):
            node = i * nk + j
            c1b[ node ] = c1[ i ] #; print c1b[ node ]  
            c2b[ node ] = c2[ j ] #; print c2b[ node ]

    MolarGibbs = [ 0. for k in range( nk * nk ) ]  # This will receive the Gibbs energu for the tuple  (MFrac[0], MFrac[2]) = (c1b[node],c2b[node]) 

    for i in range(nk): # Looop i
        for j in range(nk): # Loop j
            node = i * nk + j

            MFrac = [ 0.01 for i in range( ThT.NComp * ThT.NPhase ) ]

            MFrac[0] = c1b[node] ; MFrac[1] = 1 - c1b[node] # Associating MFrac (length NComp*NPhase) with c1b & c2b (length nk * nk )
            MFrac[2] = c2b[node] ; MFrac[3] = 1 - c2b[node]

            print ' MFrac[0] = ', MFrac[0], ' MFrac[1] = ', MFrac[1]
            print ' MFrac[2] = ', MFrac[2], ' MFrac[3] = ', MFrac[3]

            ''' Calculating ChemPot for both phases '''
            ChemPot = Call_Calc_ChemPot( MFrac ) # ChemPot has dimension (NPhase * NComp) 

            ''' Now calculating the molar Gibbs energy for the tuple (MFrac[0], MFrac[2]) = (c1b[node],c2b[node])  '''  
            MolarGibbs[ node ] =  -Call_Calc_Gibbs( MFrac, ChemPot ) 

        # End of Loop j
    # End of Loop i

    '''

                    MolarGibbsk[node] = Gibbsk[node] + sumfeedk[node]
                 ## End of Loop for components#
                finalGibbsk[node] = - MolarGibbsk[node]
    '''

    print ' Molar Gibbs', MolarGibbs

    ###
    ### Calculating the (approximated) minimum MolarGibbs
    ###
    m = [ 0. for k in range( nk * nk ) ]
    m = np.argsort(MolarGibbs)
    s1min2 = c1b[m[0]] ; s2min2 = c2b[m[0]] ; gmin2 = MolarGibbs[m[0]]
    print ' '; print ' c1 and c2:', s1min2, s2min2, 'for min Gibbs of:', gmin2


    ###
    ### Post-Processing 
    ###
    ''' Now we have the arrays of composition:
           c1b: Vapour phase ( 0. < c1b < 1. )
           c2b: Liquid phase ( 0. < c2b < 1. )
        both with length (nk*nk) and the associated Gibbs function (MolarGibbs), also with
        length (nk*nk).

        However in order to use plot_surface, we need to comply with the data structure of the arguments,
            plot_surface( X, Y, Z )
        X and Y are 2d arrays that can be generated by meshgrid library '''

    c1, c2 = np.meshgrid( c1, c2 )
    print ' the ci - c2 matrix : ' , c1, c2 
    print '####',c1.shape, len( c1b )
    print '####',c2.shape, len( c2b )

    ''' Now, Gibbs Energy (Z) must be modified to become a 2d array '''
    finalGibbsMatrix = np.zeros( (nk, nk) )
    for i in range( nk ):
        for j in range( nk):
            node = i * nk + j
            finalGibbsMatrix[i][j] = MolarGibbs[node]

    #print ' finalGibbsMatrix ', finalGibbsMatrix

    '''
    exp_value_c1 = raw_input(' exp_value_MFrac[0] or Yi ? ')
    exp_value_c1 = float(exp_value_c1)

    exp_value_c2 = raw_input(' exp_value_MFrac[2] or Xi ? ')
    exp_value_c2 = float(exp_value_c2)

    print ' error 1 = ', ( exp_value_c1 - c1[m[0]] / exp_value_c1 ) * 100 , ' % '
    print ' error 2 = ', ( exp_value_c2 - c2[m[0]] / exp_value_c2 ) * 100 , ' % '
    '''


    ###
    ### Script for Plotting
    ###

    fig = plt.figure()
    ax = fig.gca(projection='3d')
    ContourPlot = True
    if ContourPlot:
        ax.plot_surface( c1, c2, finalGibbsMatrix, rstride=8, cstride=8, alpha=0.3 )
        cset = ax.contourf( c1, c2, finalGibbsMatrix, zdir='z', offset=-10000, cmap=cm.coolwarm)
        cset = ax.contourf( c1, c2, finalGibbsMatrix, zdir='x', offset=-40, cmap=cm.coolwarm)
        cset = ax.contourf( c1, c2, finalGibbsMatrix, zdir='y', offset=40, cmap=cm.coolwarm)
        ax.set_xlabel(' component 1 ')
        ax.set_xlim( 0, 1)
        ax.set_ylabel(' component 2 ')
        ax.set_ylim( 0, 1)
        ax.set_zlabel(' Gibbs ')
        ax.set_zlim(-10000, 10000)
    else:
        surf = ax.plot_surface( c1, c2, finalGibbsMatrix, rstride=1, cstride=1, cmap=cm.coolwarm,linewidth=0, antialiased=False )
        #ax.plot_surface( c1, c2, finalGibbsMatrix, rstride=1, cstride=1, cmap=cm.coolwarm,linewidth=0, antialiased=False )
        ax.set_zlim(-1000, 1000)
        ax.zaxis.set_major_locator(LinearLocator(10))
        ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
        fig.colorbar(surf, shrink=0.5, aspect=5)

    plt.show()




            
         
           
  

          
